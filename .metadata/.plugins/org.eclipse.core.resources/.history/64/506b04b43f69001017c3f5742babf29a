package com.bgsw.service;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bgsw.entity.Product;
import com.bgsw.entity.PurchaseOrder;
import com.bgsw.entity.PurchaseOrderItem;
import com.bgsw.repository.ProductRepository;
import com.bgsw.repository.PurchaseOrderRepository;

@Service
public class PurchaseOrderService {

    @Autowired
    private PurchaseOrderRepository orderRepo;

    @Autowired
    private ProductRepository productRepository;

    public List<PurchaseOrder> getAllOrders() {
        return orderRepo.findAll();
    }

    public PurchaseOrder createOrder(PurchaseOrder order) {
        if (order.getItems() != null) {
            for (PurchaseOrderItem item : order.getItems()) {
                Long productId = item.getProduct().getProductId();
                Product product = productRepository.findById(productId)
                        .orElseThrow(() -> new RuntimeException("Product not found with ID: " + productId));
                item.setProduct(product);
                item.setPurchaseOrder(order); // bidirectional mapping
            }
        }

        return orderRepo.save(order);
    }

    public Optional<PurchaseOrder> getOrderById(Long id) {
        return orderRepo.findById(id);
    }

    public List<PurchaseOrder> getFilteredOrders(String status, LocalDate date, Long userId) {
        return orderRepo.findByFilters(date, status, userId);
    }

    public PurchaseOrder updateOrderStatus(Long orderId, String status, String otp) {
        PurchaseOrder order = orderRepo.findById(orderId)
            .orElseThrow(() -> new RuntimeException("Order not found"));

        if ("DISPATCHED".equalsIgnoreCase(status)) {
            order.setDeliveryStatus("DISPATCHED");
            order.setDeliveryOtp(generateRandomOtp()); // OTP generation here
        } else if ("DELIVERED".equalsIgnoreCase(status)) {
            if (!order.getDeliveryOtp().equals(otp)) {
                throw new RuntimeException("Invalid OTP");
            }
            order.setDeliveryStatus("DELIVERED");
            order.setOtpVerified(true);
        }

        return orderRepo.save(order);
    }

    // âœ… Private method to generate a 6-digit OTP
    private String generateRandomOtp() {
        Random random = new Random();
        int otp = 100000 + random.nextInt(900000); // generates 6-digit number
        return String.valueOf(otp);
    }
}
