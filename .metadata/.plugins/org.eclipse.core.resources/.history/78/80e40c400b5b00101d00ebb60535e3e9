package com.bgsw.config;

import com.bgsw.filter.SecurityFilter;
import com.bgsw.service.UserService;
import com.bgsw.util.SecurityUtil;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.*;
import org.springframework.security.authentication.*;
import org.springframework.security.config.annotation.authentication.configuration.*;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.*;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.*;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.*;

@Configuration
public class SecurityConfig {

//    private final SecurityUtil securityUtil;
//    private final UserService userDetailsService;
	   @Autowired
	    private SecurityUtil securityUtil;

	    @Autowired
	    private UserService userDetailsService;

    public SecurityConfig(SecurityUtil securityUtil, UserService userDetailsService) {
        this.securityUtil = securityUtil;
        this.userDetailsService = userDetailsService;
    }

    @Bean
    public SecurityFilter jwtFilter() {
        return new SecurityFilter(securityUtil, userDetailsService);
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .cors()
            .and()
            .csrf(csrf -> csrf.disable())
            .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(auth -> auth
            		.requestMatchers("/api/procurement/purchase-orders", "/api/procurement/purchase-orders/createorder").hasRole("PROCUREMENT_OFFICER")
//                .requestMatchers("/api/adduser").hasRole("ADMIN")
//                .requestMatchers("/api/getallusers").permitAll()
//                .requestMatchers("/api/deleteuser/{id}").permitAll()
//                .requestMatchers("/api/updateuser/{id}").permitAll()
//                .requestMatchers("/api/roles").permitAll()
            		.requestMatchers("/api/procurement/delivery-tracking/{orderId}").permitAll()
//            		.requestMatchers("/api/user/profile").permitAll()
//            		.requestMatchers("/api/user/profile/{id}").permitAll()
            		.requestMatchers("/api/user/profile").authenticated()
            		.requestMatchers("/api/user/profile/{id}").authenticated()
            		.requestMatchers("/api/user/test").authenticated()
            		.requestMatchers("/api/rawmaterials/*").permitAll()
                .anyRequest().authenticated()
            )
            .addFilterBefore(jwtFilter(), UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowedOriginPatterns(List.of("*"));
        config.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        config.setAllowedHeaders(List.of("*"));
        config.setAllowCredentials(true);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
        return configuration.getAuthenticationManager();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
